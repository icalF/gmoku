package client;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @author gazandic
 */
public class UI extends javax.swing.JFrame {
    public int sizes;
    private ClientManager klien;
    private boolean again = false;
    public static String winorlose;
    private boolean unavalaible = false;

    /**
     * Creates new form UI
     */
    public UI() {
        sizes = 20;
        klien = new ClientManager();

        initComponents();
        Grid.setVisible(false);
        StatusPanels.setVisible(false);
        this.getContentPane().setBackground(Color.white);
        this.setSize(800, 480);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panelchat = new javax.swing.JPanel();
        FrameTalk = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        TalkTalk = new javax.swing.JTextArea();
        TalkField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        Grid = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        JoinButton = new javax.swing.JButton();
        ReadyButton = new javax.swing.JButton();
        InputPort = new javax.swing.JTextField();
        logo = new javax.swing.JLabel();
        StatusPanels = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        javax.swing.GroupLayout PanelchatLayout = new javax.swing.GroupLayout(Panelchat);
        Panelchat.setLayout(PanelchatLayout);
        PanelchatLayout.setHorizontalGroup(
                PanelchatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );
        PanelchatLayout.setVerticalGroup(
                PanelchatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );

        FrameTalk.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                FrameTalkWindowOpened(evt);
            }
        });

        TalkTalk.setEditable(false);
        TalkTalk.setColumns(20);
        TalkTalk.setRows(5);
        jScrollPane1.setViewportView(TalkTalk);

        TalkField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TalkFieldActionPerformed(evt);
            }
        });
        TalkField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TalkFieldKeyPressed(evt);
            }
        });

        jButton1.setText("Chat");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FrameTalkLayout = new javax.swing.GroupLayout(FrameTalk.getContentPane());
        FrameTalk.getContentPane().setLayout(FrameTalkLayout);
        FrameTalkLayout.setHorizontalGroup(
                FrameTalkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(FrameTalkLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(TalkField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1)
                                .addContainerGap(21, Short.MAX_VALUE))
                        .addGroup(FrameTalkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FrameTalkLayout.createSequentialGroup()
                                        .addContainerGap(21, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(22, Short.MAX_VALUE)))
        );
        FrameTalkLayout.setVerticalGroup(
                FrameTalkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FrameTalkLayout.createSequentialGroup()
                                .addContainerGap(197, Short.MAX_VALUE)
                                .addGroup(FrameTalkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(TalkField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton1))
                                .addGap(24, 24, 24))
                        .addGroup(FrameTalkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FrameTalkLayout.createSequentialGroup()
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(56, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gomoku");
        setLocationByPlatform(true);
        setResizable(false);
        getContentPane().setLayout(null);

        Grid = new TestPane(sizes);
        Grid.setBackground(new java.awt.Color(255, 255, 255));
        Grid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout GridLayout = new javax.swing.GroupLayout(Grid);
        Grid.setLayout(GridLayout);
        GridLayout.setHorizontalGroup(
                GridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 378, Short.MAX_VALUE)
        );
        GridLayout.setVerticalGroup(
                GridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 378, Short.MAX_VALUE)
        );

        getContentPane().add(Grid);
        Grid.setBounds(60, 30, 380, 380);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(50, 20, 400, 400);

        JoinButton.setBackground(new java.awt.Color(255, 255, 255));
        JoinButton.setText("Join Game");
        JoinButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        JoinButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JoinButtonMouseClicked(evt);
            }
        });
        JoinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JoinButtonActionPerformed(evt);
            }
        });
        getContentPane().add(JoinButton);
        JoinButton.setBounds(610, 310, 130, 30);

        ReadyButton.setBackground(new java.awt.Color(255, 255, 255));
        ReadyButton.setText("Ready");
        ReadyButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        ReadyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReadyButtonMouseClicked(evt);
            }
        });
        ReadyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadyButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ReadyButton);
        ReadyButton.setBounds(610, 310, 130, 30);

        InputPort.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        getContentPane().add(InputPort);
        InputPort.setBounds(510, 310, 80, 30);

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gomoku2.png"))); // NOI18N
        logo.setAutoscrolls(true);
        getContentPane().add(logo);
        logo.setBounds(410, 30, 390, 250);

        StatusPanels.setBackground(new java.awt.Color(255, 255, 255));
        StatusPanels.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        StatusPanel.setBackground(new java.awt.Color(255, 255, 255));
        StatusPanel.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        StatusPanel.setText("Waiting for the other players..");

        javax.swing.GroupLayout StatusPanelsLayout = new javax.swing.GroupLayout(StatusPanels);
        StatusPanels.setLayout(StatusPanelsLayout);
        StatusPanelsLayout.setHorizontalGroup(
                StatusPanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StatusPanelsLayout.createSequentialGroup()
                                .addContainerGap(29, Short.MAX_VALUE)
                                .addComponent(StatusPanel)
                                .addContainerGap(27, Short.MAX_VALUE))
        );
        StatusPanelsLayout.setVerticalGroup(
                StatusPanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StatusPanelsLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(StatusPanel)
                                .addContainerGap())
        );

        getContentPane().add(StatusPanels);
        StatusPanels.setBounds(510, 360, 230, 40);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/6-dots-pattern.jpg"))); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 240, 440, 270);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/6-dots-pattern.jpg"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 440, 270);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/6-dots-pattern.jpg"))); // NOI18N
        getContentPane().add(jLabel5);
        jLabel5.setBounds(400, 220, 440, 270);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/6-dots-pattern.jpg"))); // NOI18N
        getContentPane().add(jLabel6);
        jLabel6.setBounds(420, 0, 440, 270);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void JoinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JoinButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JoinButtonActionPerformed

    private void JoinButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JoinButtonMouseClicked
        String s = InputPort.getText();
        int i = Integer.parseInt(s);
        StatusPanels.setVisible(true);
        if (i < 1 || i > 65535) {
            StatusPanel.setText("invalid server port");
        } else {
            klien.portNumber = i;

            new JoinGameThread().start();
            while ((!klien.connected) && (!unavalaible)) {
                StatusPanel.setText("connecting");
            }
            if (unavalaible || !klien.connected) {
                if (!klien.connected) {
                    StatusPanel.setText("connect failed");
                    klien.connected = false;
                }
                if (unavalaible) {
                    StatusPanel.setText("Port unavalaible");
                    unavalaible = false;
                }
            } else {
                Grid.setVisible(false);
                setGrid(ClientManager.sizeboard);
                Grid.setVisible(true);
                JoinButton.setVisible(false);
                InputPort.setVisible(false);
                logo.setVisible(false);
                StatusPanel.setText("Joined game");
            }
//      

//      FrameTalk.setSize(290, 290);
//      FrameTalk.setVisible(true);
//      TalkTalk.setText("");
        }


        // TODO add your handling code here:
    }//GEN-LAST:event_JoinButtonMouseClicked

    private void ReadyButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReadyButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_ReadyButtonMouseClicked

    private void ReadyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadyButtonActionPerformed
        String s = "ready"; // your String
        synchronized (klien.klienLock) {
            System.out.println("jahat");
            ClientManager.board.setInput(s);
            if (again) {
                klien.finalLokal();
                try {
                    klien.initLokal();
                } catch (IOException ex) {
                    Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            klien.local.start();
            again = true;
            StatusPanel.setText("Playing");
            ReadyButton.setVisible(false);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_ReadyButtonActionPerformed

    private void FrameTalkWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_FrameTalkWindowOpened
        //     TODO add your handling code here:

    }//GEN-LAST:event_FrameTalkWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        String s = TalkField.getText();
        String sa = "." + s;

        TalkField.setText("");
        TalkTalk.append("you : " + s + "\n");
    }//GEN-LAST:event_jButton1MouseClicked

    private void TalkFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TalkFieldKeyPressed

        // TODO add your handling code here:
    }//GEN-LAST:event_TalkFieldKeyPressed

    private void TalkFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TalkFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TalkFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

    /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });

    }

    private class JoinGameThread extends Thread {
        public void run() {
            try {
                klien.start();

            } catch (IOException ex) {
                unavalaible = true;
                StatusPanel.setText("Port Unavalaible");
                JoinButton.setVisible(true);
                InputPort.setVisible(true);
                logo.setVisible(true);
//        Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }


    public class TestPane extends JPanel {
        private int columnCount = 20;
        private int rowCount = 20;
        private List<Rectangle> cells;

        public TestPane(int sizes) {
            columnCount = sizes;
            rowCount = sizes;
            cells = new ArrayList<>(columnCount * rowCount);
            MouseAdapter mouseHandler, mouseHandler2;

            mouseHandler = new MouseAdapter() {
                @Override
                public void mouseMoved(MouseEvent e) {
                repaint();
                if (klien.getWinorlose() == "jahat") {
                    ReadyButton.setVisible(true);
                } else {
                    if (klien.getWinorlose().equals("win")) {
                        StatusPanel.setText("You win");
                        ReadyButton.setVisible(true);
                        klien.setWinorlose("jahat");
                    }
                    if (klien.getWinorlose().equals("lose")) {
                        StatusPanel.setText("You lose");
                        ReadyButton.setVisible(true);
                        klien.setWinorlose("jahat");
                    }
                }
                if (klien.getYou()) {
                    StatusPanel.setText("Your turn");
                } else if (!klien.getYou()) {
                    StatusPanel.setText("Your opponent's turn");
                }
                }

            };
            addMouseMotionListener(mouseHandler);

            mouseHandler2 = new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                System.out.println("masuk");
                Point point = e.getPoint();

                int width = getWidth();
                int height = getHeight();

                int cellWidth = width / columnCount;
                int cellHeight = height / rowCount;
                int xOffset = 0;

                int column = (e.getX() - xOffset) / cellWidth;
                int yOffset = 0;
                int row = (e.getY() - yOffset) / cellHeight;
                if (e.getX() >= xOffset && e.getY() >= yOffset) {

                    int columns;
                    columns = (e.getX() - xOffset) / cellWidth;
                    int rows;
                    rows = (e.getY() - yOffset) / cellHeight;

                    if (columns >= 0 && rows >= 0 && columns < columnCount && rows < rowCount) {
                        int asd = columns + 65;
                        int asdf = rows + 65;
                        char[] x = Character.toChars(asd);
                        char[] z = Character.toChars(asdf);

                        String s = new String(x);
                        String ss = new String(z);
                        s = s + ss;
                        s = s.toLowerCase();
                        ClientManager.board.setInput(s);
                        klien.finalLokal();
                        try {
                            klien.initLokal();
                        } catch (IOException ex) {
                            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        klien.local.start();

                    }

                }
                repaint();
                }

            };
            addMouseListener(mouseHandler2);
        }


        @Override
        public Dimension getPreferredSize() {
            return new Dimension(500, 500);
        }

        @Override
        public void invalidate() {
            cells.clear();
            super.invalidate();
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g.create();

            int width = getWidth();
            int height = getHeight();

            int cellWidth = width / columnCount;
            int cellHeight = height / rowCount;

            int xOffset = (width - (columnCount * cellWidth)) / 2;
            int yOffset = (height - (rowCount * cellHeight)) / 2;

            if (cells.isEmpty()) {
                for (int row = 0; row < rowCount; row++) {
                    for (int col = 0; col < columnCount; col++) {
                        Rectangle cell = new Rectangle(
                                xOffset + (col * cellWidth),
                                yOffset + (row * cellHeight),
                                cellWidth,
                                cellHeight);
                        cells.add(cell);
                    }
                }
            }
            for (int row = 0; row < rowCount; row++) {
                for (int col = 0; col < columnCount; col++) {
                    int index = row * rowCount + col;
                    Rectangle cell;
                    switch (ClientManager.board.getBoardIJ(row, col)) {
                        case 1:
                            cell = cells.get(index);
                            g2d.setColor(Color.BLUE);
                            g2d.fill(cell);
                            break;
                        case 2:
                            cell = cells.get(index);
                            g2d.setColor(Color.RED);
                            g2d.fill(cell);
                            break;
                        case 3:
                            cell = cells.get(index);
                            g2d.setColor(Color.GREEN);
                            g2d.fill(cell);
                            break;
                        case 4:
                            cell = cells.get(index);
                            g2d.setColor(Color.YELLOW);
                            g2d.fill(cell);
                            break;
                        case 5:
                            cell = cells.get(index);
                            g2d.setColor(Color.MAGENTA);
                            g2d.fill(cell);
                            break;
                        case 6:
                            cell = cells.get(index);
                            g2d.setColor(Color.orange);
                            g2d.fill(cell);
                            break;
                        case 7:
                            cell = cells.get(index);
                            g2d.setColor(Color.CYAN);
                            g2d.fill(cell);
                            break;
                    }
                }
            }
//            if (selectedCell != null) {
//
//                int index = selectedCell.x + (selectedCell.y * columnCount);
//                Rectangle cell = cells.get(index);
//                g2d.setColor(Color.BLUE);
//                g2d.fill(cell);
//
//            }

            g2d.setColor(Color.GRAY);
            for (Rectangle cell : cells) {
                g2d.draw(cell);
            }

            g2d.dispose();
        }

        int x, y;
    }

    public void setGrid(int size) {
        this.sizes = size;
        Grid = new TestPane(size);
        Grid.setBackground(new java.awt.Color(255, 255, 255));
        Grid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout GridLayout = new javax.swing.GroupLayout(Grid);
        Grid.setLayout(GridLayout);
        GridLayout.setHorizontalGroup(
            GridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addGap(0, 378, Short.MAX_VALUE)
        );
        GridLayout.setVerticalGroup(
            GridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addGap(0, 378, Short.MAX_VALUE)
        );

        getContentPane().add(Grid);
        Grid.setBounds(60, 30, 380, 380);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame FrameTalk;
    private javax.swing.JPanel Grid;
    private javax.swing.JTextField InputPort;
    private javax.swing.JButton JoinButton;
    private javax.swing.JPanel Panelchat;
    private javax.swing.JButton ReadyButton;
    private javax.swing.JLabel StatusPanel;
    private javax.swing.JPanel StatusPanels;
    private javax.swing.JTextField TalkField;
    private javax.swing.JTextArea TalkTalk;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logo;
    // End of variables declaration//GEN-END:variables
}
